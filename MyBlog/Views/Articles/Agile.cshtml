
@{
    ViewData["Title"] = "Agile";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container articles">
    <h1>Agile</h1>
    <br />
    <p>
        Çevik , geliştirmeye yönelik yinelemeli, ekip tabanlı bir yaklaşımdır. Bu yaklaşım, bir uygulamanın eksiksiz işlevsel bileşenlerde hızlı bir şekilde sunulmasını vurgulamaktadır. Görevler ve programlar oluşturmak yerine, tüm zamanlar "sprintler" adı verilen aşamalar halinde "zaman sınırlıdır". Her bir sprint, sprint başlangıcında planlanan, çalışan bir teslimat listesi ile tanımlanmış bir süreye (genellikle hafta olarak) sahiptir. Teslim edilecekler, müşteri tarafından belirlenen iş değerine göre önceliklendirilir. Sprint için planlanan tüm çalışmalar tamamlanamazsa, iş yeniden önceliklendirilir ve bilgi gelecekteki sprint planlaması için kullanılır.
        <br />
        İş tamamlandığında, proje ekibi ve müşteri tarafından günlük derlemeler ve sprint sonu demoları aracılığıyla gözden geçirilebilir ve değerlendirilebilir. Çevik, proje boyunca, özellikle de bu incelemeler sırasında çok yüksek düzeyde müşteri katılımına güvenir.
        <br /><br />
     
        <div class="row">
            <div class="col-md-3"></div>
            <div class="col-md-6"><img class="img-fluid" src="~/images/whatagile.jpeg" /></div>
            <div class="col-md-3"></div>

        </div>
        <br />
        Çevik yaklaşımın bazı avantajlarını görmek kolaydır:
        <br /><br />
        <b>1.</b> Müşteri, teslim edilen işi görmek ve geliştirme projesi boyunca kararlar ve değişiklikler yapmak için sık ve erken fırsatlara sahiptir.
        <br /><b>2.</b> Müşteri, proje boyunca proje ekibiyle kapsamlı ve doğrudan çalışarak güçlü bir sahiplenme duygusu kazanır.
        <br /> <b>3.</b> Belirli bir uygulama için pazarlama zamanı, ilk lansmanda tam bir özellik seti yayınlamaktan daha önemliyse, Agile, ardışık yinelemelerde üzerine inşa edilebilecek çalışan bir yazılımın temel sürümünü daha hızlı üretebilir.
        <br /><b>4.</b>Geliştirme genellikle daha kullanıcı odaklıdır ve muhtemelen müşterinin daha sık ve daha sık yönlendirilmesinin bir sonucudur.
        <br /> <b>5.</b> Daha Çevik Geliştirme faydaları için lütfen Çevik Yazılım Geliştirmenin 8 Faydası'na bakın .
        <br /><br />
        Ve tabii ki bazı dezavantajlar da var :
        <br /><br />
        <b>1.</b> Çok yüksek derecede müşteri katılımı, proje için harika olsa da, bu tür bir katılım için zamanı olmayan veya ilgisi olmayan bazı müşteriler için sorun yaratabilir.
        <br /> <b>2.</b>Agile, geliştirme ekibinin üyeleri tamamen projeye adandığında en iyi şekilde çalışır.
        <br /><b>3.</b> Çevik, zaman kutulu teslimata ve sık sık yeniden önceliklendirmeye odaklandığından, teslimat için ayarlanan bazı öğelerin ayrılan zaman çerçevesinde tamamlanmaması mümkündür. Proje maliyetine ek olarak (başlangıçta planlananların ötesinde) ek sprintlere ihtiyaç duyulabilir. Ek olarak, müşteri katılımı genellikle proje boyunca talep edilen ek özelliklere yol açar. Yine, bu, uygulamanın genel zamanına ve maliyetine katkıda bulunabilir.
        <br /><b>4.</b> Bir Agile projesindeki yakın çalışma ilişkileri, ekip üyeleri aynı fiziksel alanda bulunduğunda yönetilmesi en kolay olanıdır ve bu her zaman mümkün değildir. Ancak, bu sorunu çözmenin web kameraları, işbirliği araçları vb. Gibi çeşitli yolları vardır.
        <br /> <b>5.</b>Çevik geliştirmenin yinelemeli doğası, sistemin tüm kapsamı ilk mimari ve tasarımda dikkate alınmazsa, sık sık yeniden düzenlemeye yol açabilir. Bu yeniden düzenleme olmadan, sistem genel kalitede bir düşüşe maruz kalabilir. Bu, daha büyük ölçekli uygulamalarda veya yüksek düzeyde entegrasyon içeren sistemlerde daha belirgin hale gelir.
    </p>
</div>

